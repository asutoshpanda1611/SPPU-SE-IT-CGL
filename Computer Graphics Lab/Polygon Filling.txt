#include <iostream>
#include<GL/glut.h>
#include<math.h>
#include<stdio.h>

using namespace std;

int option;

struct Point // stores pixel to color pixel by pixel
{
	int x;
	int y;
};

struct Color    // represents color model
{
	float r;
	float g;
	float b;
};

Color getPixelColor(int x, int y){
	Color color;
	glReadPixels(x, y, 1, 1, GL_RGB, GL_FLOAT, &color);  
	return color;
}

void setPixelColor(int x, int y, Color color){
	glColor3f(color.r, color.g, color.b);   
	glBegin(GL_POINTS);
	glVertex2i(x, y);
	glEnd();
	glFlush();
}

void fFill(int x, int y, Color oldColor, Color newColor){
	Color color;
	color = getPixelColor(x, y);
	if (color.r == oldColor.r && color.g == oldColor.g && color.b == oldColor.b) {
		setPixelColor(x, y, newColor);
		fFill(x + 1, y, oldColor, newColor);
		fFill(x, y + 1, oldColor, newColor);
		fFill(x - 1, y, oldColor, newColor);
		fFill(x, y - 1, oldColor, newColor);
	}
	return;
	glFlush();
}



void bFill(int x, int y, Color fColor, Color bColor)
{
	Color color;
	color = getPixelColor(x, y);
	if ((color.r != fColor.r || color.g != fColor.g || color.b != fColor.b) && (color.r != bColor.r || color.g != bColor.g || color.b != bColor.b)) {
		setPixelColor(x, y, fColor);
		bFill(x + 1, y, fColor, bColor);
		bFill(x, y + 1, fColor, bColor);
		bFill(x - 1, y, fColor, bColor);
		bFill(x, y - 1, fColor, bColor);
	}
	return;
	glFlush();
}

void display(void)
{
	glClear(GL_COLOR_BUFFER_BIT);
	glBegin(GL_LINE_LOOP);
	glVertex2f(250,250);
	glVertex2f(250,300);
	glVertex2f(300,300);
	glVertex2f(300,250);
	glEnd();
	glFlush();
}

void myinit()
{
	glClearColor(0.0, 0.0, 0.0, 0.0); //set background as black
	glColor3f(1.0, 1.0, 1.0);
	glPointSize(1.0);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluOrtho2D(0.0, 500.0, 0.0, 500.0);
}

void myMouse(int button, int state, int x, int y){
    Color newColor = {0.0f,1.0f,0.0f};
    Color oldColor = {0.0f,0.0f,0.0f};
	Color bColor = { 1.0f,1.0f,1.0f };
	Color fColor = { 1.0f,0.0f,0.0f };
	if(option==1){
        fFill(x,500-y,oldColor,newColor);
	}
	else{
        bFill(x,500-y, fColor, bColor);
	}
}

int main (int argc, char** argv){
    cout<<"1.Flood Fill"<<endl;
    cout<<"2.Boundary Fill"<<endl;
    cout<<"enter option"<<endl;
    cin>>option;
    glutInit (&argc, argv); //Initialize toolkit
    glutInitDisplayMode (GLUT_SINGLE | GLUT_RGB); //set display mode
    glutInitWindowSize (500, 500); //Set window size
    glutInitWindowPosition(0, 0); //set window position on screen
    glutCreateWindow ("Polygon filling using seed feel & boundary fill");
    glutDisplayFunc(display);  //Register redraw func
    glutMouseFunc(myMouse);
    myinit();
    glutMainLoop();
    return 0;
}